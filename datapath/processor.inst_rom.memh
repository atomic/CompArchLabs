20020001  // [0x00400000]   addi $2, $0, 1                  ; 8: addi     $2, $0, 1         # reg2 := 0x0000_0001
00421820  // [0x00400004]   add $3, $2, $2                  ; 9: add      $3, $2, $2        # reg3 := 0x0000_0002
00022022  // [0x00400008]   sub $4, $0, $2                  ; 10: sub      $4, $0, $2        # reg4 := 0xFFFF_FFFF
200500ff  // [0x0040000c]   addi $5, $0, 255                ; 12: addi     $5, $0, 0x00FF
200600f0  // [0x00400010]   addi $6, $0, 240                ; 13: addi     $6, $0, 0x00F0
00a62824  // [0x00400014]   and $5, $5, $6                  ; 14: and      $5, $5, $6        # reg5 := 0x0000_00F0
200600ff  // [0x00400018]   addi $6, $0, 255                ; 16: addi     $6, $0, 0x00FF
200700f0  // [0x0040001c]   addi $7, $0, 240                ; 17: addi     $7, $0, 0x00F0
00c73025  // [0x00400020]   or $6, $6, $7                   ; 18: or       $6, $6, $7        # reg6 := 0x0000_00FF
200700ff  // [0x00400024]   addi $7, $0, 255                ; 20: addi     $7, $0, 0x00FF
20080f0f  // [0x00400028]   addi $8, $0, 3855               ; 21: addi     $8, $0, 0x0F0F
00e83826  // [0x0040002c]   xor $7, $7, $8                  ; 22: xor      $7, $7, $8        # reg7 := 0x0000_0FF0
200800ff  // [0x00400030]   addi $8, $0, 255                ; 24: addi     $8, $0, 0x00FF
20090f0f  // [0x00400034]   addi $9, $0, 3855               ; 25: addi     $9, $0, 0x0F0F
01094027  // [0x00400038]   nor $8, $8, $9                  ; 26: nor      $8, $8, $9        # reg8 := 0xFFFF_F000   
200a4000  // [0x0040003c]   addi $10, $0, 16384             ; 30: addi     $10, $0, 0x4000
014a5020  // [0x00400040]   add $10, $10, $10               ; 31: add      $10, $10, $10     # $10 := 0x0000_8000
014a5020  // [0x00400044]   add $10, $10, $10               ; 32: add      $10, $10, $10     # $10 := 0x0001_0000
014a5020  // [0x00400048]   add $10, $10, $10               ; 33: add      $10, $10, $10     # $10 := 0x0002_0000
014a5020  // [0x0040004c]   add $10, $10, $10               ; 34: add      $10, $10, $10     # $10 := 0x0004_0000
014a5020  // [0x00400050]   add $10, $10, $10               ; 35: add      $10, $10, $10     # $10 := 0x0008_0000
014a5020  // [0x00400054]   add $10, $10, $10               ; 36: add      $10, $10, $10     # $10 := 0x1000_0000
014a5020  // [0x00400058]   add $10, $10, $10               ; 37: add      $10, $10, $10     # $10 := 0x0020_0000
014a5020  // [0x0040005c]   add $10, $10, $10               ; 38: add      $10, $10, $10     # $10 := 0x0040_0000
014a5020  // [0x00400060]   add $10, $10, $10               ; 39: add      $10, $10, $10     # $10 := 0x0080_0000
014a5020  // [0x00400064]   add $10, $10, $10               ; 40: add      $10, $10, $10     # $10 := 0x0100_0000
014a5020  // [0x00400068]   add $10, $10, $10               ; 41: add      $10, $10, $10     # $10 := 0x0200_0000
014a5020  // [0x0040006c]   add $10, $10, $10               ; 42: add      $10, $10, $10     # $10 := 0x0400_0000
014a5020  // [0x00400070]   add $10, $10, $10               ; 43: add      $10, $10, $10     # $10 := 0x0800_0000
014a5020  // [0x00400074]   add $10, $10, $10               ; 44: add      $10, $10, $10     # $10 := 0x1000_0000
200b00ff  // [0x00400078]   addi $11, $0, 255               ; 47: addi     $11, $0, 0xFF
ad4b0000  // [0x0040007c]   sw $11, 0($10)                  ; 48: sw       $11, 0($10)       # mem addr 0x1000_0000 := 0x0000_00FF
8d490000  // [0x00400080]   lw $9, 0($10)                   ; 51: lw       $9, 0($10)        # reg9 := 0x0000_00FF 
00000020  // [0x00400084]   add $0, $0, $0                  ; 52: add      $0, $0, $0        # nop
00000020  // [0x00400088]   add $0, $0, $0                  ; 53: add      $0, $0, $0        # nop
20190001  // [0x0040008c]   addi $25, $0, 1                 ; 55: addi     $25, $0, 1        # indicate end of test for testbench 
